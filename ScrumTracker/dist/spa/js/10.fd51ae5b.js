(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[10],{"71ee":function(t,s,e){"use strict";e.r(s);var a=function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("q-page",{staticClass:"q-ma-lg window-width"},[e("div",{staticClass:"q-pa-md"},[e("q-table",{staticClass:"q-pa-lg",attrs:{title:"Tasks",data:t.allTasks,columns:t.columns,"virtual-scroll":"",pagination:t.pagination,"rows-per-page-options":[0],loading:t.loading},on:{"update:pagination":function(s){t.pagination=s}},scopedSlots:t._u([{key:"loading",fn:function(){return[e("q-inner-loading",{attrs:{showing:"",color:"primary"}})]},proxy:!0},{key:"body-cell-finnished",fn:function(s){return[e("q-td",{attrs:{props:s}},[e("div",[!0!==s.row.finnished&&!0===s.row.accepted?e("q-btn",{attrs:{size:"sm",round:"",color:"teal",icon:"done"},on:{click:function(e){return t.markAsDone(s.row)}}}):t._e(),!0===s.row.finnished&&!0===s.row.accepted?e("q-btn",{attrs:{size:"sm",round:"",color:"blue-10",icon:"clear"},on:{click:function(e){return t.markAsDone(s.row)}}}):t._e(),!0!==s.row.accepted?e("q-icon",{attrs:{size:"sm",round:"",color:"grey-4",name:"hide_source"}}):t._e()],1)])]}},{key:"body-cell-acceptReject",fn:function(s){return[e("q-td",{attrs:{props:s}},[e("div",[""===s.row.assigned&&!0!==s.row.accepted?e("q-btn",{staticClass:"q-ma-xs",attrs:{size:"sm",round:"",color:"teal",icon:"done"},on:{click:function(e){return t.acceptTask(s.row)}}}):t._e(),!0===s.row.accepted?e("q-btn",{staticClass:"q-ma-xs",attrs:{size:"sm",round:"",color:"red-5",icon:"clear"},on:{click:function(e){return t.rejectTask(s.row)}}}):t._e(),""!==s.row.assigned&&!0!==s.row.accepted?e("q-icon",{attrs:{size:"sm",round:"",color:"grey-4",name:"hide_source"}}):t._e()],1)])]}},{key:"body-cell-logtime",fn:function(s){return[e("q-td",{attrs:{props:s}},[""!==s.row.assigned&&!0===s.row.accepted?e("div",[!0===s.row.active_task?e("q-btn",{staticClass:"q-ma-xs",attrs:{flat:"",size:"md",round:"",color:"teal",label:"timer is running"},on:{click:function(e){t.logTimeDialog=!0,t.logToTaskRow=s.row,t.timeLeft=s.row.time}}}):e("q-btn",{staticClass:"q-ma-xs",attrs:{flat:"",size:"md",round:"",color:"teal",icon:"schedule"},on:{click:function(e){t.logTimeDialog=!0,t.logToTaskRow=s.row,t.timeLeft=s.row.time}}})],1):t._e()])]}}])})],1),e("q-dialog",{attrs:{persistent:"","transition-show":"scale","transition-hide":"scale"},model:{value:t.errorMessageDialog,callback:function(s){t.errorMessageDialog=s},expression:"errorMessageDialog"}},[e("q-card",{staticClass:"bg-teal text-white text-center",staticStyle:{width:"300px"}},[e("q-card-section",[e("div",{staticClass:"text-h6"},[t._v("Alert")])]),e("q-card-section",{staticClass:"q-pt-none"},[t._v("\n        "+t._s(this.errorMessage)+"\n      ")]),e("q-card-actions",{staticClass:"bg-white text-teal",attrs:{align:"right"}},[e("q-btn",{directives:[{name:"close-popup",rawName:"v-close-popup"}],attrs:{flat:"",label:"OK"}})],1)],1)],1),e("q-dialog",{attrs:{persistent:"","transition-show":"scale","transition-hide":"scale"},model:{value:t.logTimeDialog,callback:function(s){t.logTimeDialog=s},expression:"logTimeDialog"}},[e("q-card",{staticStyle:{width:"400px"}},[e("q-card-section",{staticClass:"bg-primary text-white text-center"},[e("div",{staticClass:"text-h6"},[t._v("Log Time")])]),e("q-card-section",{staticClass:"row bg-white text-primary flex flex-center"},[!1===t.timerRunning&&!1===t.logToTaskRow.active_task?e("q-btn",{staticClass:"q-ma-md",attrs:{label:"start timer",icon:"schedule",color:"primary",size:"lg"},on:{click:function(s){return t.startTimer()}}}):e("q-btn",{staticClass:"q-ma-md",attrs:{label:"stop timer",icon:"schedule",color:"secondary",size:"lg"},on:{click:function(s){return t.stopTimer()}}})],1),e("q-separator",{attrs:{inset:""}}),!1===t.timerRunning||!1===t.logToTaskRow.active_task?e("q-card-section",[e("div",{staticClass:"text-caption q-ma-sm"},[t._v("or Log Time for this task.")]),e("div",{staticClass:"row"},[e("q-input",{staticClass:"q-ma-md",staticStyle:{"max-width":"150px"},attrs:{hint:"please use the form '1d 2h 33m' (days, hours, minutes)",filled:""},model:{value:t.timeSpent,callback:function(s){t.timeSpent=s},expression:"timeSpent"}}),e("q-space"),e("q-input",{staticClass:"q-ma-md",staticStyle:{"max-width":"150px"},attrs:{hint:"Time left to finish this task (specify in hours).",filled:""},model:{value:t.timeLeft,callback:function(s){t.timeLeft=s},expression:"timeLeft"}})],1)]):t._e(),""!==t.errorMessageTime?e("q-card-section",[e("p",{staticClass:"text-red text-caption text-center"},[t._v(t._s(t.errorMessageTime))])]):t._e(),e("q-card-actions",{attrs:{align:"right"}},[e("q-btn",{directives:[{name:"close-popup",rawName:"v-close-popup"}],attrs:{label:"cancel"},on:{click:function(s){t.timeSpent=0}}}),e("q-space"),!1===t.timerRunning?e("q-btn",{attrs:{color:"primary",label:"Log Time"},on:{click:function(s){return t.writeTime()}}}):e("q-btn",{directives:[{name:"close-popup",rawName:"v-close-popup"}],attrs:{color:"secondary",label:"Ok"}})],1)],1)],1)],1)},i=[],r=e("7053"),o=e.n(r),n=e("2f62"),c={name:"Tasks",data(){return{pagination:{rowsPerPage:0},startTime:0,stopTime:0,timeSpent:0,timeLeft:0,timerRunning:!1,errorMessageTime:"",logToTaskRow:"",allTasks:[],allCards:[],currentUser:{},loading:!1,errorMessage:"",errorMessageDialog:!1,logTimeDialog:!1,columns:[{name:"finnished",align:"center",label:"Mark as (not) done"},{name:"project",required:!0,label:"Project name",align:"center",field:"project"},{name:"card",required:!0,align:"center",label:"Card name",field:"card"},{name:"task",required:!0,align:"center",label:"Task name",field:"task"},{name:"acceptReject",align:"center",label:"Accept/Reject"},{name:"timespent",align:"center",label:"Time Spent",field:"time_spent"},{name:"timeleft",align:"center",label:"Time Left (h)",field:"time"},{name:"logtime",align:"center",label:"Log Time"}]}},mounted(){this.currentUser=this.getCurrentUser(),this.allProjects=this.getProjects(),this.fetchCards(),this.showTasks()},methods:o()(o()(o()(o()(o()(o()(o()({},Object(n["c"])("user",["getUsers","getCurrentUser"])),Object(n["c"])("card",["getCards"])),Object(n["c"])("project",["getProjects"])),Object(n["b"])("card",["fetchCards"])),Object(n["b"])("card",["updateCard"])),Object(n["b"])("user",["updateUserTasks","updateCurrentUser"])),{},{startTimer(){console.log(this.logToTaskRow.active),this.timerRunning=!0,this.startTime=new Date;const t=this.currentUser,s=this.getKeyOfSubtask(t.tasks,this.logToTaskRow.subtaskId),e=this.getCurrentTask(this.logToTaskRow.subtaskId,t.tasks);e.active_task=!0,e.start_time=this.startTime,t.tasks[s]=e,this.updateUserTasks(t),this.updateCurrentUser(t),this.showTasks()},stopTimer(){this.timerRunning=!1,this.stopTime=new Date;const t=this.currentUser,s=this.getKeyOfSubtask(t.tasks,this.logToTaskRow.subtaskId),e=this.getCurrentTask(this.logToTaskRow.subtaskId,t.tasks);var a=0;a=this.startTime?this.stopTime.getTime()-this.startTime.getTime():this.stopTime.getTime()-e.start_time.getTime(),this.timeSpent=this.formatTimeFromMs(a),e.active_task=!1,e.start_time="",t.tasks[s]=e,this.updateUserTasks(t),this.updateCurrentUser(t),this.showTasks()},formatTimeFromMs(t){var s=Math.floor(t/864e5),e=1e3*s*60*60*24,a=Math.floor((t-e)/36e5);e=1e3*s*60*60*24+1e3*a*60*60;var i=Math.round((t-e)/6e4),r="";return s>0?r+=s+"d ":a>0?r+=a+"h ":i>0?r+=i+"m":r=0,r},formatTimeToMs(t){this.errorMessageTime="";var s=t.split(" "),e=0;for(var a in s)return"d"===s[a].substr(s[a].length-1,1)?e+=864e5*s[a].match(/\d+/)[0]:"h"===s[a].substr(s[a].length-1,1)?e+=36e5*s[a].match(/\d+/)[0]:"m"===s[a].substr(s[a].length-1,1)?e+=6e4*s[a].match(/\d+/)[0]:this.errorMessageTime="Wrong time format.",e},writeTime(){const t=this.getCurrentCard(this.logToTaskRow.cardId),s=this.getCurrentTask(this.logToTaskRow.subtaskId,t.subtasks),e=this.getKeyOfSubtask(t.subtasks,this.logToTaskRow.subtaskId);s.subtask_time=this.timeLeft,s.subtask_time_spent?s.subtask_time_spent+=this.timeSpent:s.subtask_time_spent=this.timeSpent,t.subtasks[e]=s,this.updateCard(t);const a=this.currentUser,i=this.getKeyOfSubtask(a.tasks,this.logToTaskRow.subtaskId),r=this.getCurrentTask(this.logToTaskRow.subtaskId,a.tasks);r.time_spent?r.time_spent+=this.timeSpent:r.time_spent=this.timeSpent,a.tasks[i]=r,this.updateUserTasks(a),this.updateCurrentUser(a),""===this.errorMessageTime&&(this.timeSpent="",this.logToTaskRow="",this.logTimeDialog=!1),this.showTasks()},showTasks(){setTimeout((()=>{this.allCards=this.getCards(),this.allTasks=this.tasksToArray(this.allCards),console.log(this.allTasks)}),500)},tasksToArray(){const t=[];return setTimeout((()=>{const s=this.currentUser.tasks;for(const e in s){const a=s[e],i=this.getCurrentCard(a.card_id),r=this.getCurrentTask(a.subtask_id,i.subtasks);console.log(i);const o=this.formatTimeFromMs(a.time_spent),n=this.getCurrentProject(i.project_id),c={finnished:r.done,project:n.name,card:i.card_name,subtaskId:a.subtask_id,cardId:a.card_id,task:r.subtask_name,accepted:a.accepted,assigned:r.assigned_user,time:r.subtask_time,time_spent:o,active_task:a.active_task,start_time:a.start_time};console.log(c),t.push(c)}}),500),t},getCurrentCard(t){for(const s in this.allCards)if(this.allCards[s]._id===t)return this.allCards[s]},getCurrentTask(t,s){for(const e in s)if(s[e].subtask_id===t)return s[e]},getCurrentProject(t){for(const s in this.allProjects)if(this.allProjects[s]._id===t)return this.allProjects[s]},getKeyOfSubtask(t,s){let e=0;for(const a in t)t[a].subtask_id===s&&(e=a);return e},acceptTask(t){console.log(t);const s=this.getCurrentCard(t.cardId),e=this.getCurrentTask(t.subtaskId,s.subtasks),a=this.getKeyOfSubtask(s.subtasks,t.subtaskId);e.assigned_user=this.currentUser._id,s.subtasks[a]=e,this.updateCard(s);const i=this.currentUser,r=this.getKeyOfSubtask(i.tasks,t.subtaskId),o=this.getCurrentTask(t.subtaskId,i.tasks);o.accepted=!0,i.tasks[r]=o,this.updateUserTasks(i),this.updateCurrentUser(i),this.showTasks()},rejectTask(t){console.log(t);const s=this.getCurrentCard(t.cardId),e=this.getCurrentTask(t.subtaskId,s.subtasks),a=this.getKeyOfSubtask(s.subtasks,t.subtaskId);e.assigned_user="",s.subtasks[a]=e,this.updateCard(s);const i=this.currentUser,r=this.getKeyOfSubtask(i.tasks,t.subtaskId),o=this.getCurrentTask(t.subtaskId,i.tasks);o.accepted=!1,i.tasks[r]=o,this.updateUserTasks(i),this.updateCurrentUser(i),this.showTasks()},markAsDone(t){const s=this.getCurrentCard(t.cardId),e=this.getCurrentTask(t.subtaskId,s.subtasks),a=this.getKeyOfSubtask(s.subtasks,t.subtaskId);"DONE"!==s.card_round?(e.done=!t.finnished,s[a]=e,this.updateCard(s),this.showTasks()):(this.errorMessage="You can't change the status of this task as the associated user stoy is already marked as finnished!",this.errorMessageDialog=!0)}})},l=c,d=e("2877"),u=e("9989"),m=e("eaac"),h=e("74f7"),g=e("db86"),k=e("9c40"),p=e("0016"),T=e("24e8"),b=e("f09f"),f=e("a370"),w=e("4b7e"),C=e("eb85"),_=e("27f9"),q=e("2c91"),v=e("7f67"),y=e("eebe"),x=e.n(y),S=Object(d["a"])(l,a,i,!1,null,null,null);s["default"]=S.exports;x()(S,"components",{QPage:u["a"],QTable:m["a"],QInnerLoading:h["a"],QTd:g["a"],QBtn:k["a"],QIcon:p["a"],QDialog:T["a"],QCard:b["a"],QCardSection:f["a"],QCardActions:w["a"],QSeparator:C["a"],QInput:_["a"],QSpace:q["a"]}),x()(S,"directives",{ClosePopup:v["a"]})}}]);